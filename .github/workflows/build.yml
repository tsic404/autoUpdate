name: build

on:
  workflow_call:
    inputs:
      url:
        required: true
        type: string
      appid:
        required: true
        type: string
      version:
        required: true
        type: string
      arch:
        required: true
        type: string
      hook:
        default: false
        type: boolean
env:
  APPUSERNAME: ${{ secrets.APP_DEV_USERNAME }}
  APPPASSWORD: ${{ secrets.APP_DEV_PASSWORD }}
  COOPERATION_URL: ${{ secrets.COOPERATION_URL }}
  PYTHONPATH: ${{ github.workspace }}/lib

jobs:
  build:
    container:
      image: linuxdeepin/apricot:latest
      options: --privileged
      volumes:
        - /etc/machine-id:/etc/machine-id
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        shell: bash
    steps:
      - name: install_depends
        run: |
          apt update && apt dist-upgrade -y
          apt-get install -y python3-pip python3-venv python3-tk python3-dev python3-wheel xvfb xauth faketime fakeroot wget unzip curl coreutils

      - name: checkout
        uses: actions/checkout@v3
        with: 
          ref: ${{ github.ref }}

      - name: install_depends
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip3 install wheel
          pip3 install -r requirements.txt

      - name: setup chrome and chrome driver
        run: |
          export VERSION=`curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE`
          wget https://chromedriver.storage.googleapis.com/${VERSION}/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          mv chromedriver /usr/bin/
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          apt install -y ./google-chrome-stable_current_amd64.deb

      - name: download
        id: download
        run: |
          source venv/bin/activate
          wget ${{ inputs.url }}
          python3 scripts/download "${{ inputs.url }}"
    
      - name: extract
        id: extract
        run: |
          source venv/bin/activate
          python3 scripts/extract "${{ steps.download.outputs.FILE }}"

      - name: package
        id: package
        run: |
          source venv/bin/activate
          ./apps/${{ inputs.appid }}/package.${{ inputs.arch }} "${{ steps.extract.outputs.EXTRACTED }}" "${{ inputs.version }}"

      - name: call hooks
        if: ${{ inputs.hook }}
        run: |
          source venv/bin/activate
          for i in `ls hooks`
          do
            ./hooks/$i "${{ inputs.appid }}" "${{ inputs.version }}" ${{ inputs.arch }} "${{ steps.package.outputs.PACKAGED }}"
          done

      - name: upload package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ inputs.appid }}
          path: ${{ steps.package.outputs.PACKAGED }}
